type User @model @aws_iam @aws_cognito_user_pools @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }, { allow: public, provider: iam, operations: [read] }]) {
  id: ID!
  name: String
  phone: String
  accountNumber: String
  posts: [Post] @connection(keyName: "byUser", fields: ["id"])
}

type Post
  @model
  @aws_iam
  @aws_cognito_user_pools
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }, { allow: public, provider: iam, operations: [read] }, { allow: groups, groups: ["admin"] }])
  @key(name: "byUser", fields: ["userID"])
  @key(name: "postByDate", fields: ["show", "createdAt"], queryField: "postByDate") {
  id: ID!
  title: String!
  userID: ID!
  content: String
  user: User @connection(fields: ["userID"])
  comments: [Comment] @connection(keyName: "byPost", fields: ["id"])
  likes: [PostLike!] @connection(keyName: "byPost", fields: ["id"]) # 좋아요
  reports: [PostReport!] @connection(keyName: "byPost", fields: ["id"]) # 신고하기
  category: CategoryType
  show: String
  createdAt: AWSDateTime
}

enum CategoryType {
  ANGULAR
  REACT
  AWS
  WEB_PROGRAMING
}

type PostLike
  @model
  @aws_iam
  @aws_cognito_user_pools
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }, { allow: public, provider: iam, operations: [read] }])
  @key(name: "byPost", fields: ["postID"]) {
  id: ID!
  postID: ID!
  userID: ID!
  user: User @connection(fields: ["userID"])
}

type PostReport
  @model
  @aws_iam
  @aws_cognito_user_pools
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }, { allow: public, provider: iam, operations: [read] }])
  @key(name: "byPost", fields: ["postID"]) {
  id: ID!
  postID: ID!
  userID: ID!
  user: User @connection(fields: ["userID"])
  post: Post @connection(fields: ["postID"])
}

type Comment
  @model
  @aws_iam
  @aws_cognito_user_pools
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }, { allow: public, provider: iam, operations: [read] }])
  @key(name: "byPost", fields: ["postID", "content"]) {
  id: ID!
  userID: ID!
  commentor: User @connection(fields: ["userID"])
  postID: ID!
  post: Post @connection(fields: ["postID"])
  content: String!
}

# type Subscription {
#   onCreatePostPublic: Post @aws_subscribe(mutations: ["createPost"]) @aws_iam @aws_cognito_user_pools
#   onUpdatePostPublic: Post @aws_subscribe(mutations: ["updatePost"]) @aws_iam @aws_cognito_user_pools
#   onDeletePostPublic: Post @aws_subscribe(mutations: ["deletePost"]) @aws_iam @aws_cognito_user_pools
# }
